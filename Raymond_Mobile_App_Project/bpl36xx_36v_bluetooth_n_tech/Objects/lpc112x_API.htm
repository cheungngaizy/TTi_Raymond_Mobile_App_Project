<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\lpc112x_API.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\lpc112x_API.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Aug 26 10:19:57 2017
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BT_N_Tech_Task &rArr; n_tech_data_handler &rArr; n_tech_send_packet &rArr; uart_send_non_blocking &rArr; Chip_UART_SendRB &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[64]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemManage_Handler</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
 <LI><a href="#[15]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">SVC_Handler</a><BR>
 <LI><a href="#[16]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">DebugMon_Handler</a><BR>
 <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
 <LI><a href="#[28]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">Reserved_IRQHandler</a><BR>
 <LI><a href="#[1a]">ADCB_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADCB_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADCA_IRQHandler</a> from lpc112x_api_adc.o(i.ADCA_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1a]">ADCB_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[8]">A_Tech_36V_COM_Task</a> from main.o(i.A_Tech_36V_COM_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[7]">BMS_Task</a> from main.o(i.BMS_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[27]">BOD_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[9]">BT_N_Tech_Task</a> from main.o(i.BT_N_Tech_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[d]">Black_Box_Task</a> from main.o(i.Black_Box_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[13]">BusFault_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[34]">Charge_Data_Com</a> from main.o(i.Charge_Data_Com) referenced from main.o(i.MRT_Init)
 <LI><a href="#[6]">Chip_I2C_EventHandler</a> from i2c_112x.o(i.Chip_I2C_EventHandler) referenced 2 times from i2c_112x.o(.data)
 <LI><a href="#[3f]">Chip_I2C_EventHandlerPolling</a> from i2c_112x.o(i.Chip_I2C_EventHandlerPolling) referenced from lpc112x_api_i2c.o(i.i2c_master_config)
 <LI><a href="#[38]">DOC_detect</a> from main.o(i.DOC_detect) referenced from main.o(i.Pin_Interrupt_Init)
 <LI><a href="#[a]">D_Teck_Task</a> from main.o(i.D_Teck_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[16]">DebugMon_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[e]">Debug_Task</a> from main.o(i.Debug_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[11]">HardFault_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1c]">I2C_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[c]">LED_Task</a> from main.o(i.LED_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[12]">MemManage_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[2c]">PIOINT0_IRQHandler</a> from lpc112x_api_pin_int.o(i.PIOINT0_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[2b]">PIOINT1_IRQHandler</a> from lpc112x_api_pin_int.o(i.PIOINT1_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[2a]">PIOINT2_IRQHandler</a> from lpc112x_api_pin_int.o(i.PIOINT2_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[29]">PIOINT3_IRQHandler</a> from lpc112x_api_pin_int.o(i.PIOINT3_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[b]">Pwr_Tool_Com_Task</a> from main.o(i.Pwr_Tool_Com_Task) referenced 2 times from main.o(.data)
 <LI><a href="#[28]">Reserved_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[21]">SSP0_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1b]">SSP1_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from lpc112x_api_sys_tick.o(i.SysTick_Handler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1d]">TIMER16_0_IRQHandler</a> from lpc112x_api_mrt.o(i.TIMER16_0_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1e]">TIMER16_1_IRQHandler</a> from lpc112x_api_mrt.o(i.TIMER16_1_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1f]">TIMER32_0_IRQHandler</a> from lpc112x_api_mrt.o(i.TIMER32_0_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[20]">TIMER32_1_IRQHandler</a> from lpc112x_api_mrt.o(i.TIMER32_1_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[23]">UART1_IRQHandler</a> from lpc112x_api_uart.o(i.UART1_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[24]">UART2_IRQHandler</a> from lpc112x_api_uart.o(i.UART2_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[22]">UART_IRQHandler</a> from lpc112x_api_uart.o(i.UART_IRQHandler) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[19]">WAKEUP_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced 13 times from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[26]">WDT_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[40]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc112x.o(.text)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[35]">charge_detect</a> from main.o(i.charge_detect) referenced from main.o(i.MRT_Init)
 <LI><a href="#[39]">chg_detect</a> from main.o(i.chg_detect) referenced from main.o(i.Pin_Interrupt_Init)
 <LI><a href="#[3a]">dual_dsg_detec</a> from main.o(i.dual_dsg_detec) referenced from main.o(i.Pin_Interrupt_Init)
 <LI><a href="#[2e]">fputc</a> from lpc112x_api_printf.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[3c]">fuel_gauge_detect</a> from main.o(i.fuel_gauge_detect) referenced from main.o(i.Pin_Interrupt_Init)
 <LI><a href="#[3b]">load_detect</a> from main.o(i.load_detect) referenced from main.o(i.Pin_Interrupt_Init)
 <LI><a href="#[36]">mrt2_irq_user</a> from main.o(i.mrt2_irq_user) referenced from main.o(i.MRT_Init)
 <LI><a href="#[37]">mrt3_irq_user</a> from main.o(i.mrt3_irq_user) referenced from main.o(i.MRT_Init)
 <LI><a href="#[31]">read_cell_temp</a> from main.o(i.read_cell_temp) referenced from main.o(i.ADC_Init)
 <LI><a href="#[32]">read_mosfet_temp</a> from main.o(i.read_mosfet_temp) referenced from main.o(i.ADC_Init)
 <LI><a href="#[30]">read_pack_dsg_curr</a> from main.o(i.read_pack_dsg_curr) referenced from main.o(i.ADC_Init)
 <LI><a href="#[33]">read_pack_volt</a> from main.o(i.read_pack_volt) referenced from main.o(i.ADC_Init)
 <LI><a href="#[3d]">sys_tick_count</a> from main.o(i.sys_tick_count) referenced from main.o(i.System_Tick_Init)
 <LI><a href="#[3e]">uart_tx_free</a> from main.o(i.uart_tx_free) referenced from main.o(i.UART_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[110]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[111]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[112]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[113]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[114]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[115]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[116]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[120]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[121]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[44]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[48]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADCB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCB_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4f]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_rx_buffer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prvRingBuf_Read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_send_packet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_output_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_input_cmd_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_from_packet
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Teck_Task
</UL>

<P><STRONG><a name="[12e]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[53]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_tech_data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_send_packet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_input_cmd_handler
</UL>

<P><STRONG><a name="[12f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_send_packet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Teck_Task
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[131]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_current
</UL>

<P><STRONG><a name="[134]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Data_Com
</UL>

<P><STRONG><a name="[135]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>Black_Box_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Black_Box_Task))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Debug_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Debug_Task))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetClockRate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTLFORate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prvRingBuf_Read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_vol
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_average
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temperature
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_Do_Avg
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_current
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_input_cmd_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temperature
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calt_aver_cell_volt
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_current
</UL>

<P><STRONG><a name="[5b]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[5a]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_current
</UL>

<P><STRONG><a name="[138]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5e]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[5c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5f]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[60]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[45]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[61]"></a>__printf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, __printf_nopercent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[62]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[139]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>ADCA_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpc112x_api_adc.o(i.ADCA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADCA_IRQHandler &rArr; adc_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC_Init &rArr; adc_config &rArr; Chip_ADC_StartCalibration &rArr; Chip_ADC_SetClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ready_isr_callback_register
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>AFE_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.AFE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AFE_Init &rArr; AFE_write_register &rArr; i2c_write_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>AFE_read_register</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, main.o(i.AFE_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_current
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_vol
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_AFE_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_AFE_Chip_Temp
</UL>

<P><STRONG><a name="[6c]"></a>AFE_write_register</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(i.AFE_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AFE_write_register &rArr; i2c_write_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_blocking
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pec_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discharging_Control
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_Init
</UL>

<P><STRONG><a name="[8]"></a>A_Tech_36V_COM_Task</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.A_Tech_36V_COM_Task))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>BMS_Task</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, main.o(i.BMS_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BMS_Task &rArr; Read_AFE_Infor &rArr; read_pack_current &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_max_min_cell_volt_mov_aver
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_soc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NTC_infor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AFE_Infor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discharging_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Cell_Volt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>BT_N_Tech_Task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.BT_N_Tech_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BT_N_Tech_Task &rArr; n_tech_data_handler &rArr; n_tech_send_packet &rArr; uart_send_non_blocking &rArr; Chip_UART_SendRB &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_set_BTname_cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>Cal_Cell_Volt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.Cal_Cell_Volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cal_Cell_Volt &rArr; calt_aver_cell_volt &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calt_min_cell_volt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calt_max_cell_volt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calt_aver_cell_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[34]"></a>Charge_Data_Com</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, main.o(i.Charge_Data_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Charge_Data_Com &rArr; gpio_output &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MRT_Init)
</UL>
<P><STRONG><a name="[76]"></a>Charging_Control</STRONG> (Thumb, 1148 bytes, Stack size 8 bytes, main.o(i.Charging_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Charging_Control &rArr; gpio_output &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[ff]"></a>CheckSum_check</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.CheckSum_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckSum_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_tech_data
</UL>

<P><STRONG><a name="[81]"></a>Chip_ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, adc_112x.o(i.Chip_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[83]"></a>Chip_ADC_SetClockRate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc_112x.o(i.Chip_ADC_SetClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_ADC_SetClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_StartCalibration
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[dd]"></a>Chip_ADC_SetSequencerBits</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adc_112x.o(i.Chip_ADC_SetSequencerBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_ADC_SetSequencerBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_non_blocking
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[86]"></a>Chip_ADC_StartCalibration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc_112x.o(i.Chip_ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_ADC_StartCalibration &rArr; Chip_ADC_SetClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[87]"></a>Chip_Clock_GetMainClockRate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clock_112x.o(i.Chip_Clock_GetMainClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
</UL>

<P><STRONG><a name="[84]"></a>Chip_Clock_GetSystemClockRate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock_112x.o(i.Chip_Clock_GetSystemClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetClockRate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[88]"></a>Chip_Clock_GetSystemPLLInClockRate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, clock_112x.o(i.Chip_Clock_GetSystemPLLInClockRate))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[8a]"></a>Chip_Clock_GetSystemPLLOutClockRate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock_112x.o(i.Chip_Clock_GetSystemPLLOutClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetSystemPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[89]"></a>Chip_Clock_GetWDTOSCRate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clock_112x.o(i.Chip_Clock_GetWDTOSCRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTLFORate
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[99]"></a>Chip_Clock_SetMainClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_112x.o(i.Chip_Clock_SetMainClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[94]"></a>Chip_Clock_SetSystemPLLSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_112x.o(i.Chip_Clock_SetSystemPLLSource))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[6]"></a>Chip_I2C_EventHandler</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, i2c_112x.o(i.Chip_I2C_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_I2C_EventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_112x.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Chip_I2C_EventHandlerPolling</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, i2c_112x.o(i.Chip_I2C_EventHandlerPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_I2C_EventHandlerPolling &rArr; Chip_I2C_MasterStateHandler &rArr; handleMasterXferState &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterStateHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_IsStateChanged
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc112x_api_i2c.o(i.i2c_master_config)
</UL>
<P><STRONG><a name="[ef]"></a>Chip_I2C_Init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, i2c_112x.o(i.Chip_I2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_config
</UL>

<P><STRONG><a name="[8d]"></a>Chip_I2C_IsStateChanged</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c_112x.o(i.Chip_I2C_IsStateChanged))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_EventHandlerPolling
</UL>

<P><STRONG><a name="[8e]"></a>Chip_I2C_MasterStateHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c_112x.o(i.Chip_I2C_MasterStateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_I2C_MasterStateHandler &rArr; handleMasterXferState &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMasterXferState
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_EventHandlerPolling
</UL>

<P><STRONG><a name="[90]"></a>Chip_I2C_MasterTransfer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, i2c_112x.o(i.Chip_I2C_MasterTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSlaverXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_blocking
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_blocking
</UL>

<P><STRONG><a name="[92]"></a>Chip_I2C_SetClockRate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, i2c_112x.o(i.Chip_I2C_SetClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_I2C_SetClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_config
</UL>

<P><STRONG><a name="[f0]"></a>Chip_I2C_SetMasterEventHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i2c_112x.o(i.Chip_I2C_SetMasterEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_I2C_SetMasterEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_config
</UL>

<P><STRONG><a name="[95]"></a>Chip_SYSCON_PowerDown</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, syscon_112x.o(i.Chip_SYSCON_PowerDown))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[82]"></a>Chip_SYSCON_PowerUp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, syscon_112x.o(i.Chip_SYSCON_PowerUp))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[fd]"></a>Chip_SYSCON_SetWakeup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syscon_112x.o(i.Chip_SYSCON_SetWakeup))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_int_config
</UL>

<P><STRONG><a name="[93]"></a>Chip_SetupIrcClocking</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sysinit_112x.o(i.Chip_SetupIrcClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_SetupIrcClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSystemPLLSource
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetMainClockSource
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerUp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerDown
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_FMC_SetFLASHAccess
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupSystemPLL
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSysClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_init
</UL>

<P><STRONG><a name="[9a]"></a>Chip_TIMER_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timer_112x.o(i.Chip_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[104]"></a>Chip_TIMER_Reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer_112x.o(i.Chip_TIMER_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[9c]"></a>Chip_UART_IRQRBHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uart_112x.o(i.Chip_UART_IRQRBHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_GetUsedBytes
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>Chip_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_112x.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUARTClockID
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[a0]"></a>Chip_UART_RXIntHandlerRB</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart_112x.o(i.Chip_UART_RXIntHandlerRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_UART_RXIntHandlerRB &rArr; RingBuf_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ReadLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[a5]"></a>Chip_UART_Send</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uart_112x.o(i.Chip_UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendByte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ReadLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>

<P><STRONG><a name="[a7]"></a>Chip_UART_SendBlocking</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, uart_112x.o(i.Chip_UART_SendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a8]"></a>Chip_UART_SendRB</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, uart_112x.o(i.Chip_UART_SendRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Chip_UART_SendRB &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_non_blocking
</UL>

<P><STRONG><a name="[a9]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_112x.o(i.Chip_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetDivisorLatches
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_EnableDivisorAccess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_DisableDivisorAccess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[9d]"></a>Chip_UART_TXIntHandlerRB</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart_112x.o(i.Chip_UART_TXIntHandlerRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendByte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ReadLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[38]"></a>DOC_detect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.DOC_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DOC_detect &rArr; gpio_output &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Pin_Interrupt_Init)
</UL>
<P><STRONG><a name="[a]"></a>D_Teck_Task</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, main.o(i.D_Teck_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = D_Teck_Task &rArr; uart_read_rx_buffer &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_buff_emty
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_non_blocking
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_rx_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_rx_buffer_data_len
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>Debug_Interface_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.Debug_Interface_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Debug_Interface_Init &rArr; printf_config &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Discharging_Control</STRONG> (Thumb, 622 bytes, Stack size 8 bytes, main.o(i.Discharging_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Discharging_Control &rArr; AFE_write_register &rArr; i2c_write_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[78]"></a>Feed_Watchdog</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.Feed_Watchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Feed_Watchdog &rArr; read_AFE_event &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_AFE_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_AFE_Chip_Temp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[b7]"></a>Func_Do_Avg</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, main.o(i.Func_Do_Avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Func_Do_Avg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NTC_infor
</UL>

<P><STRONG><a name="[b8]"></a>GPIO_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Init &rArr; gpio_direction &rArr; Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>I2C_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Init &rArr; i2c_master_config &rArr; Chip_I2C_SetClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>LED_Task</STRONG> (Thumb, 640 bytes, Stack size 8 bytes, main.o(i.LED_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Task &rArr; gpio_output &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_toggle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>MRT_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i.MRT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MRT_Init &rArr; timer_config &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr_callback_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, lpc112x_api_pin_int.o(i.PIOINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIOINT0_IRQHandler &rArr; Chip_GPIO_ClearInts
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetMaskedInts
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_ClearInts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, lpc112x_api_pin_int.o(i.PIOINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIOINT1_IRQHandler &rArr; Chip_GPIO_ClearInts
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetMaskedInts
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_ClearInts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, lpc112x_api_pin_int.o(i.PIOINT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIOINT2_IRQHandler &rArr; Chip_GPIO_ClearInts
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetMaskedInts
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_ClearInts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lpc112x_api_pin_int.o(i.PIOINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIOINT3_IRQHandler &rArr; Chip_GPIO_ClearInts
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetMaskedInts
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_ClearInts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>Pin_Interrupt_Init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, main.o(i.Pin_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Pin_Interrupt_Init &rArr; pin_int_config &rArr; Chip_GPIO_SetModeLow
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_isr_callback_register
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_int_enable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_int_config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_updown
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>Pwr_Tool_Com_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Pwr_Tool_Com_Task))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>Read_AFE_Infor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.Read_AFE_Infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_AFE_Infor &rArr; read_pack_current &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_dsg_current
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_current
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[73]"></a>Read_NTC_infor</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(i.Read_NTC_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_NTC_infor &rArr; read_pack_vol &rArr; adc_start_non_blocking &rArr; Chip_ADC_SetSequencerBits
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_vol
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mosfet_temperature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_temperature
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_Do_Avg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[ce]"></a>RingBuf_Copy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuf_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingBuf_Copy &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prvRingBuf_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ReadRxBufferOnly
</UL>

<P><STRONG><a name="[d0]"></a>RingBuf_Free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuf_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DeleteRxBufferBytes
</UL>

<P><STRONG><a name="[9e]"></a>RingBuf_GetUsedBytes</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuf_GetUsedBytes))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_buff_emty
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_rx_buffer_data_len
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>RingBuf_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuf_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[ad]"></a>RingBuf_Read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuf_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prvRingBuf_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_rx_buffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
</UL>

<P><STRONG><a name="[a3]"></a>RingBuf_Write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ring_buffer.o(i.RingBuf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RingBuf_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpc112x_api_sys_tick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chip_112x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_init
</UL>

<P><STRONG><a name="[d2]"></a>System_Tick_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.System_Tick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = System_Tick_Init &rArr; sys_tick_config &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_isr_callback_register
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lpc112x_api_mrt.o(i.TIMER16_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER16_0_IRQHandler &rArr; Chip_TIMER_MatchPending
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_MatchPending
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_ClearMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lpc112x_api_mrt.o(i.TIMER16_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER16_1_IRQHandler &rArr; Chip_TIMER_MatchPending
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_MatchPending
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_ClearMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lpc112x_api_mrt.o(i.TIMER32_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER32_0_IRQHandler &rArr; Chip_TIMER_MatchPending
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_MatchPending
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_ClearMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lpc112x_api_mrt.o(i.TIMER32_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER32_1_IRQHandler &rArr; Chip_TIMER_MatchPending
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_MatchPending
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_ClearMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc112x_api_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART1_IRQHandler &rArr; Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_GetUsedBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc112x_api_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART2_IRQHandler &rArr; Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_GetUsedBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc112x_api_uart.o(i.UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_IRQHandler &rArr; Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_GetUsedBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>UART_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_Init &rArr; uart_config &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_ready_isr_callback_register
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpc112x_api_adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMasterXferState
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discharging_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Control
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Data_Com
</UL>

<P><STRONG><a name="[cf]"></a>_prvRingBuf_Read</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ring_buffer.o(i._prvRingBuf_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Copy
</UL>

<P><STRONG><a name="[4e]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc112x_api_printf.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[6a]"></a>adc_config</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, lpc112x_api_adc.o(i.adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_config &rArr; Chip_ADC_StartCalibration &rArr; Chip_ADC_SetClockRate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_StartCalibration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetSequencerBits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetClockRate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetThrLowValue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetThrHighValue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[de]"></a>adc_read_blocking</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc112x_api_adc.o(i.adc_read_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_read_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_GetDataReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_vol
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_dsg_current
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mosfet_temperature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_temperature
</UL>

<P><STRONG><a name="[69]"></a>adc_ready_isr_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc112x_api_adc.o(i.adc_ready_isr_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[e0]"></a>adc_start_non_blocking</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc112x_api_adc.o(i.adc_start_non_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_start_non_blocking &rArr; Chip_ADC_SetSequencerBits
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_SetSequencerBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_vol
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pack_dsg_current
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mosfet_temperature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_temperature
</UL>

<P><STRONG><a name="[f9]"></a>cal_CheckSum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.cal_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[75]"></a>calculate_soc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.calculate_soc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = calculate_soc &rArr; get_soc &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soc
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[7d]"></a>calt_aver_cell_volt</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, main.o(i.calt_aver_cell_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = calt_aver_cell_volt &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Cell_Volt
</UL>

<P><STRONG><a name="[7b]"></a>calt_max_cell_volt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.calt_max_cell_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calt_max_cell_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Cell_Volt
</UL>

<P><STRONG><a name="[7c]"></a>calt_min_cell_volt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.calt_min_cell_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calt_min_cell_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Cell_Volt
</UL>

<P><STRONG><a name="[35]"></a>charge_detect</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.charge_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = charge_detect &rArr; gpio_input
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MRT_Init)
</UL>
<P><STRONG><a name="[74]"></a>check_max_min_cell_volt_mov_aver</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.check_max_min_cell_volt_mov_aver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_max_min_cell_volt_mov_aver &rArr; moving_average
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_average
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Task
</UL>

<P><STRONG><a name="[39]"></a>chg_detect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.chg_detect))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Pin_Interrupt_Init)
</UL>
<P><STRONG><a name="[3a]"></a>dual_dsg_detec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.dual_dsg_detec))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Pin_Interrupt_Init)
</UL>
<P><STRONG><a name="[5d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc112x_api_printf.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2e]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc112x_api_printf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fputc &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>fuel_gauge_detect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.fuel_gauge_detect))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Pin_Interrupt_Init)
</UL>
<P><STRONG><a name="[e5]"></a>get_data_from_packet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.get_data_from_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_data_from_packet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_tech_data
</UL>

<P><STRONG><a name="[e1]"></a>get_soc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, main.o(i.get_soc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_soc &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_soc
</UL>

<P><STRONG><a name="[e6]"></a>get_temperature</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, main.o(i.get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_temperature &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mosfet_temperature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cell_temperature
</UL>

<P><STRONG><a name="[b9]"></a>gpio_direction</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, lpc112x_api_gpio.o(i.gpio_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_direction &rArr; Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[e3]"></a>gpio_input</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lpc112x_api_gpio.o(i.gpio_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_input
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_detect
</UL>

<P><STRONG><a name="[7f]"></a>gpio_output</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lpc112x_api_gpio.o(i.gpio_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discharging_Control
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOC_detect
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charging_Control
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Data_Com
</UL>

<P><STRONG><a name="[bc]"></a>gpio_output_toggle</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lpc112x_api_gpio.o(i.gpio_output_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_toggle &rArr; Chip_GPIO_SetPinToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task
</UL>

<P><STRONG><a name="[c7]"></a>gpio_pull_updown</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lpc112x_api_gpio.o(i.gpio_pull_updown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_pull_updown &rArr; pinmodesetting
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmodesetting
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Interrupt_Init
</UL>

<P><STRONG><a name="[8f]"></a>handleMasterXferState</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, i2c_112x.o(i.handleMasterXferState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handleMasterXferState &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterStateHandler
</UL>

<P><STRONG><a name="[bb]"></a>i2c_master_config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lpc112x_api_i2c.o(i.i2c_master_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_master_config &rArr; Chip_I2C_SetClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetMasterEventHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[6f]"></a>i2c_pec_calc</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.i2c_pec_calc))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_write_register
</UL>

<P><STRONG><a name="[6e]"></a>i2c_read_blocking</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lpc112x_api_i2c.o(i.i2c_read_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_read_register
</UL>

<P><STRONG><a name="[70]"></a>i2c_write_blocking</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lpc112x_api_i2c.o(i.i2c_write_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_write_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_write_register
</UL>

<P><STRONG><a name="[3b]"></a>load_detect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.load_detect))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Pin_Interrupt_Init)
</UL>
<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tick_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Interrupt_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Interface_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e4]"></a>moving_average</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, main.o(i.moving_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = moving_average
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_max_min_cell_volt_mov_aver
</UL>

<P><STRONG><a name="[36]"></a>mrt2_irq_user</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.mrt2_irq_user))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MRT_Init)
</UL>
<P><STRONG><a name="[37]"></a>mrt3_irq_user</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.mrt3_irq_user))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MRT_Init)
</UL>
<P><STRONG><a name="[7a]"></a>n_tech_data_handler</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, main.o(i.n_tech_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = n_tech_data_handler &rArr; n_tech_send_packet &rArr; uart_send_non_blocking &rArr; Chip_UART_SendRB &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_buff_emty
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_rx_buffer_data_len
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ReadRxBufferOnly
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_DeleteRxBufferBytes
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_n_tech_data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_send_packet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_output_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_input_cmd_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_get_expected_op_code
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_N_Tech_Task
</UL>

<P><STRONG><a name="[f6]"></a>n_tech_get_expected_op_code</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.n_tech_get_expected_op_code))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[f8]"></a>n_tech_input_cmd_handler</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, main.o(i.n_tech_input_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = n_tech_input_cmd_handler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[f7]"></a>n_tech_output_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.n_tech_output_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = n_tech_output_cmd_handler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_set_BTname_cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[fa]"></a>n_tech_send_packet</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, main.o(i.n_tech_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = n_tech_send_packet &rArr; uart_send_non_blocking &rArr; Chip_UART_SendRB &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_non_blocking
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[79]"></a>n_tech_set_BTname_cmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.n_tech_set_BTname_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = n_tech_set_BTname_cmd &rArr; n_tech_output_cmd_handler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_output_cmd_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_N_Tech_Task
</UL>

<P><STRONG><a name="[c5]"></a>pin_int_config</STRONG> (Thumb, 618 bytes, Stack size 32 bytes, lpc112x_api_pin_int.o(i.pin_int_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pin_int_config &rArr; Chip_GPIO_SetModeLow
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_SetWakeup
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetModeLow
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetModeHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Interrupt_Init
</UL>

<P><STRONG><a name="[c6]"></a>pin_int_enable</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lpc112x_api_pin_int.o(i.pin_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Interrupt_Init
</UL>

<P><STRONG><a name="[c4]"></a>pin_isr_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc112x_api_pin_int.o(i.pin_isr_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Interrupt_Init
</UL>

<P><STRONG><a name="[b4]"></a>printf_config</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, lpc112x_api_printf.o(i.printf_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = printf_config &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Interface_Init
</UL>

<P><STRONG><a name="[b6]"></a>read_AFE_Chip_Temp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.read_AFE_Chip_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_AFE_Chip_Temp &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
</UL>

<P><STRONG><a name="[b5]"></a>read_AFE_event</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.read_AFE_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_AFE_event &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Watchdog
</UL>

<P><STRONG><a name="[31]"></a>read_cell_temp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.read_cell_temp))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ADC_Init)
</UL>
<P><STRONG><a name="[cd]"></a>read_cell_temperature</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.read_cell_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_cell_temperature &rArr; adc_start_non_blocking &rArr; Chip_ADC_SetSequencerBits
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_non_blocking
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_blocking
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NTC_infor
</UL>

<P><STRONG><a name="[c8]"></a>read_cell_vol</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.read_cell_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read_cell_vol &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AFE_Infor
</UL>

<P><STRONG><a name="[32]"></a>read_mosfet_temp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.read_mosfet_temp))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ADC_Init)
</UL>
<P><STRONG><a name="[cc]"></a>read_mosfet_temperature</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.read_mosfet_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_mosfet_temperature &rArr; adc_start_non_blocking &rArr; Chip_ADC_SetSequencerBits
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_non_blocking
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_blocking
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NTC_infor
</UL>

<P><STRONG><a name="[f4]"></a>read_n_tech_data</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, main.o(i.read_n_tech_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_n_tech_data &rArr; get_data_from_packet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_from_packet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[c9]"></a>read_pack_current</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, main.o(i.read_pack_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = read_pack_current &rArr; AFE_read_register &rArr; i2c_read_blocking &rArr; Chip_I2C_MasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFE_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AFE_Infor
</UL>

<P><STRONG><a name="[30]"></a>read_pack_dsg_curr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.read_pack_dsg_curr))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ADC_Init)
</UL>
<P><STRONG><a name="[ca]"></a>read_pack_dsg_current</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.read_pack_dsg_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_pack_dsg_current &rArr; adc_start_non_blocking &rArr; Chip_ADC_SetSequencerBits
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_non_blocking
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AFE_Infor
</UL>

<P><STRONG><a name="[cb]"></a>read_pack_vol</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.read_pack_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_pack_vol &rArr; adc_start_non_blocking &rArr; Chip_ADC_SetSequencerBits
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_non_blocking
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_NTC_infor
</UL>

<P><STRONG><a name="[33]"></a>read_pack_volt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.read_pack_volt))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ADC_Init)
</UL>
<P><STRONG><a name="[d4]"></a>sys_tick_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lpc112x_api_sys_tick.o(i.sys_tick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_tick_config &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tick_Init
</UL>

<P><STRONG><a name="[3d]"></a>sys_tick_count</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.sys_tick_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.System_Tick_Init)
</UL>
<P><STRONG><a name="[d3]"></a>sys_tick_isr_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc112x_api_sys_tick.o(i.sys_tick_isr_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tick_Init
</UL>

<P><STRONG><a name="[f1]"></a>system_clock_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc112x_api_sys_clock.o(i.system_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = system_clock_init &rArr; SystemCoreClockUpdate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>task_scheduler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, main.o(i.task_scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>task_tick</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.task_tick))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_count
</UL>

<P><STRONG><a name="[bf]"></a>timer_config</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lpc112x_api_mrt.o(i.timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_config &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_SetMatch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_Init
</UL>

<P><STRONG><a name="[c0]"></a>timer_enable</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, lpc112x_api_mrt.o(i.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_Init
</UL>

<P><STRONG><a name="[be]"></a>timer_isr_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc112x_api_mrt.o(i.timer_isr_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_Init
</UL>

<P><STRONG><a name="[f5]"></a>uart_DeleteRxBufferBytes</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc112x_api_uart.o(i.uart_DeleteRxBufferBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_DeleteRxBufferBytes &rArr; RingBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[f3]"></a>uart_ReadRxBufferOnly</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lpc112x_api_uart.o(i.uart_ReadRxBufferOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_ReadRxBufferOnly &rArr; RingBuf_Copy &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
</UL>

<P><STRONG><a name="[d8]"></a>uart_config</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, lpc112x_api_uart.o(i.uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_config &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[af]"></a>uart_get_rx_buffer_data_len</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lpc112x_api_uart.o(i.uart_get_rx_buffer_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_get_rx_buffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_GetUsedBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Teck_Task
</UL>

<P><STRONG><a name="[b0]"></a>uart_read_rx_buffer</STRONG> (Thumb, 38 bytes, Stack size 112 bytes, lpc112x_api_uart.o(i.uart_read_rx_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uart_read_rx_buffer &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Teck_Task
</UL>

<P><STRONG><a name="[b2]"></a>uart_send_non_blocking</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lpc112x_api_uart.o(i.uart_send_non_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = uart_send_non_blocking &rArr; Chip_UART_SendRB &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuf_Read &rArr; _prvRingBuf_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_send_packet
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Teck_Task
</UL>

<P><STRONG><a name="[d9]"></a>uart_send_tx_ready_isr_callback_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc112x_api_uart.o(i.uart_send_tx_ready_isr_callback_register))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[b1]"></a>uart_tx_buff_emty</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lpc112x_api_uart.o(i.uart_tx_buff_emty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_tx_buff_emty
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_GetUsedBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n_tech_data_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Teck_Task
</UL>

<P><STRONG><a name="[3e]"></a>uart_tx_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.uart_tx_free))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.UART_Init)
</UL>
<P><STRONG><a name="[80]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Data_Com
</UL>

<P><STRONG><a name="[109]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>Chip_ADC_GetDataReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc112x_api_adc.o(i.Chip_ADC_GetDataReg))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_blocking
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_scan
</UL>

<P><STRONG><a name="[dc]"></a>Chip_ADC_SetThrHighValue</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, lpc112x_api_adc.o(i.Chip_ADC_SetThrHighValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_ADC_SetThrHighValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[db]"></a>Chip_ADC_SetThrLowValue</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, lpc112x_api_adc.o(i.Chip_ADC_SetThrLowValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_ADC_SetThrLowValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[da]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc112x_api_adc.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[67]"></a>adc_scan</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lpc112x_api_adc.o(i.adc_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_ADC_GetDataReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCA_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>Chip_Clock_EnablePeriphClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc112x_api_gpio.o(i.Chip_Clock_EnablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_updown
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>

<P><STRONG><a name="[e8]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lpc112x_api_gpio.o(i.Chip_GPIO_SetPinDIRInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>

<P><STRONG><a name="[e9]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lpc112x_api_gpio.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>

<P><STRONG><a name="[ea]"></a>Chip_GPIO_SetPinState</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc112x_api_gpio.o(i.Chip_GPIO_SetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output
</UL>

<P><STRONG><a name="[eb]"></a>Chip_GPIO_SetPinToggle</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lpc112x_api_gpio.o(i.Chip_GPIO_SetPinToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_toggle
</UL>

<P><STRONG><a name="[ec]"></a>pinmodesetting</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lpc112x_api_gpio.o(i.pinmodesetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pinmodesetting
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_updown
</UL>

<P><STRONG><a name="[d6]"></a>Chip_TIMER_ClearMatch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc112x_api_mrt.o(i.Chip_TIMER_ClearMatch))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>Chip_TIMER_MatchPending</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpc112x_api_mrt.o(i.Chip_TIMER_MatchPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_TIMER_MatchPending
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>Chip_TIMER_SetMatch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc112x_api_mrt.o(i.Chip_TIMER_SetMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_TIMER_SetMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[c2]"></a>Chip_GPIO_ClearInts</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc112x_api_pin_int.o(i.Chip_GPIO_ClearInts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_ClearInts
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT1_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT0_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>Chip_GPIO_GetMaskedInts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc112x_api_pin_int.o(i.Chip_GPIO_GetMaskedInts))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT3_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT1_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOINT0_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>Chip_GPIO_SetModeHigh</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lpc112x_api_pin_int.o(i.Chip_GPIO_SetModeHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetModeHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_int_config
</UL>

<P><STRONG><a name="[fc]"></a>Chip_GPIO_SetModeLow</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lpc112x_api_pin_int.o(i.Chip_GPIO_SetModeLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetModeLow
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_int_config
</UL>

<P><STRONG><a name="[102]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lpc112x_api_sys_tick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_config
</UL>

<P><STRONG><a name="[106]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc112x_api_uart.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[108]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lpc112x_api_uart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[fe]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc112x_api_printf.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_config
</UL>

<P><STRONG><a name="[ee]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc112x_api_i2c.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_config
</UL>

<P><STRONG><a name="[8b]"></a>Chip_Clock_GetPLLFreq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_112x.o(i.Chip_Clock_GetPLLFreq))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
</UL>

<P><STRONG><a name="[8c]"></a>Chip_Clock_GetWDTLFORate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock_112x.o(i.Chip_Clock_GetWDTLFORate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_Clock_GetWDTLFORate
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
</UL>

<P><STRONG><a name="[ed]"></a>getCurState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_112x.o(i.getCurState))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMasterXferState
</UL>

<P><STRONG><a name="[91]"></a>startSlaverXfer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_112x.o(i.startSlaverXfer))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_MasterTransfer
</UL>

<P><STRONG><a name="[97]"></a>Chip_Clock_SetSysClockDiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinit_112x.o(i.Chip_Clock_SetSysClockDiv))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[96]"></a>Chip_Clock_SetupSystemPLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysinit_112x.o(i.Chip_Clock_SetupSystemPLL))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[98]"></a>Chip_FMC_SetFLASHAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysinit_112x.o(i.Chip_FMC_SetFLASHAccess))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[9b]"></a>Chip_TIMER_GetClock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer_112x.o(i.Chip_TIMER_GetClock))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_TIMER_Init
</UL>

<P><STRONG><a name="[ac]"></a>Chip_UART_DisableDivisorAccess</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_112x.o(i.Chip_UART_DisableDivisorAccess))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[aa]"></a>Chip_UART_EnableDivisorAccess</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_112x.o(i.Chip_UART_EnableDivisorAccess))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[9f]"></a>Chip_UART_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_112x.o(i.Chip_UART_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[a4]"></a>Chip_UART_ReadLineStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_112x.o(i.Chip_UART_ReadLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
</UL>

<P><STRONG><a name="[a6]"></a>Chip_UART_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_112x.o(i.Chip_UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>

<P><STRONG><a name="[ab]"></a>Chip_UART_SetDivisorLatches</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_112x.o(i.Chip_UART_SetDivisorLatches))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[a2]"></a>getUARTClockID</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uart_112x.o(i.getUARTClockID))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
